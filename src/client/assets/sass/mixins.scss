/**
 * Positioning
 */
@function _unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  }
  @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  }
  @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  }
  @else {
    @return $shorthand;
  }
}

@function _is-length($value) {
  /* stylelint-disable-next-line */
  @return type-of($value) != 'null' and (str-slice($value + '', 1, 4) == 'calc'
  or index(auto inherit initial 0, $value)
  or (type-of($value) == 'number' and not(unitless($value))));
}

@mixin position($position: relative, $coordinates: null) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $coordinates: _unpack($coordinates);

  $offsets: (
    top: nth($coordinates, 1),
    right: nth($coordinates, 2),
    bottom: nth($coordinates, 3),
    left: nth($coordinates, 4)
  );

  position: $position;

  @each $offset, $value in $offsets {
    @if _is-length($value) {
      #{$offset}: $value;
    }
  }
}

@mixin absolute($coordinates) {
  @include position(absolute, $coordinates);
}

@mixin fixed($coordinates) {
  @include position(fixed, $coordinates);
}

@mixin relative($coordinates) {
  @include position(relative, $coordinates);
}

/**
 * Depth
 */
@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  }
  @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

/**
 * Sizing
 */
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/**
 * Margin & Padding
 */
@mixin push($spacing: $space) {
  margin: $spacing;
}

@mixin push--top($spacing: $space) {
  margin-top: $spacing;
}

@mixin push--right($spacing: $space) {
  margin-right: $spacing;
}

@mixin push--bottom($spacing: $space) {
  margin-bottom: $spacing;
}

@mixin push--left($spacing: $space) {
  margin-left: $spacing;
}

@mixin push--ends($spacing: $space) {
  margin: {
    top: $spacing;
    bottom: $spacing;
  }
}

@mixin push--sides($spacing: $space) {
  margin: {
    right: $spacing;
    left: $spacing;
  }
}

@mixin push--auto {
  margin: {
    right: auto;
    left: auto;
  }
}

@mixin offset--sides($spacing: $space) {
  margin: {
    right: -$spacing;
    left: -$spacing;
  }
}

%flush {
  margin: 0;
}

%flush--top {
  margin-top: 0;
}

%flush--right {
  margin-right: 0;
}

%flush--bottom {
  margin-bottom: 0;
}

%flush--left {
  margin-left: 0;
}

%flush--ends {
  margin: {
    top: 0;
    bottom: 0;
  }
}

%flush--sides {
  margin: {
    right: 0;
    left: 0;
  }
}

@mixin soft($spacing: $space) {
  padding: $spacing;
}

@mixin soft--top($spacing: $space) {
  padding-top: $spacing;
}

@mixin soft--right($spacing: $space) {
  padding-right: $spacing;
}

@mixin soft--bottom($spacing: $space) {
  padding-bottom: $spacing;
}

@mixin soft--left($spacing: $space) {
  padding-left: $spacing;
}

@mixin soft--ends($spacing: $space) {
  padding: {
    top: $spacing;
    bottom: $spacing;
  }
}

@mixin soft--sides($spacing: $space) {
  padding: {
    right: $spacing;
    left: $spacing;
  }
}

%hard {
  padding: 0;
}

%hard--top {
  padding-top: 0;
}

%hard--right {
  padding-right: 0;
}

%hard--bottom {
  padding-bottom: 0;
}

%hard--left {
  padding-left: 0;
}

%hard--ends {
  padding: {
    top: 0;
    bottom: 0;
  }
}

%hard--sides {
  padding: {
    right: 0;
    left: 0;
  }
}

/**
 * Typography
 */
@mixin font($font, $color: false, $tt: false, $td: false, $ls: false) {
  @extend %antialiased;

  font: $font;

  @if $color {
    color: $color;
  }

  @if $tt {
    text-transform: $tt;
  }

  @if $td {
    text-decoration: $td;
  }

  @if $ls {
    letter-spacing: $ls;
  }
}

@mixin truncate($truncation-boundary: false) {
  @if $truncation-boundary {
    max-width: $truncation-boundary;
  }

  @extend %truncated;
}

/**
 * Colors
 */
@function c($color, $value: base) {
  @if map-has-key($ui-colors, $color) {
    $color: map-get($ui-colors, $color);
    $value: map-get($color, $value);

    @return $value;
  }
  @else {
    @warn 'There is no color "#{$color}" in this list; choose one of: #{$ui-colors}';
  }
}
